{"ast":null,"code":"var _jsxFileName = \"/home/kelly/chat/video-aplicacoes-real-time-socketio/client/src/Chat.js\";\nimport React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport uuid from 'uuid/v4';\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\nconst myId = uuid();\nconst socket = io('http://localhost:8080');\nsocket.on('connect', () => console.log('[IO] Connect => A new connection has been established'));\n\nconst Chat = () => {\n  const [message, updateMessage] = useState('');\n  const [messages, updateMessages] = useState([]);\n  useEffect(() => {\n    const handleNewMessage = newMessage => updateMessages([...messages, newMessage]);\n\n    socket.on('chat.message', handleNewMessage);\n    return () => socket.off('chat.message', handleNewMessage);\n  }, [messages]);\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n\n    if (message.trim()) {\n      socket.emit('chat.message', {\n        id: myId,\n        message\n      });\n      updateMessage('');\n    }\n  };\n\n  const handleInputChange = event => updateMessage(event.target.value);\n\n  const addEmoji = e => {\n    let sym = e.unified.split('-');\n    let codesArray = [];\n    sym.forEach(el => codesArray.push('0x' + el));\n    let emoji = String.fromCodePoint(...codesArray);\n    updateMessage(message + emoji);\n  };\n\n  return /*#__PURE__*/React.createElement(\"main\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, messages.map((m, index) => /*#__PURE__*/React.createElement(\"li\", {\n    className: `list__item list__item--${m.id === myId ? 'mine' : 'other'}`,\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: `message message--${m.id === myId ? 'mine' : 'other'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 25\n    }\n  }, m.message)))), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"form\",\n    onSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"form__field\",\n    onChange: handleInputChange,\n    placeholder: \"Type a new message here\",\n    type: \"text\",\n    value: message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/home/kelly/chat/video-aplicacoes-real-time-socketio/client/src/Chat.js"],"names":["React","useEffect","useState","io","uuid","Picker","myId","socket","on","console","log","Chat","message","updateMessage","messages","updateMessages","handleNewMessage","newMessage","off","handleFormSubmit","event","preventDefault","trim","emit","id","handleInputChange","target","value","addEmoji","e","sym","unified","split","codesArray","forEach","el","push","emoji","String","fromCodePoint","map","m","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport io from 'socket.io-client'\nimport uuid from 'uuid/v4'\n\nimport 'emoji-mart/css/emoji-mart.css'\nimport {Picker} from 'emoji-mart'\n\n\nconst myId = uuid()\nconst socket = io('http://localhost:8080')\nsocket.on('connect', () => console.log('[IO] Connect => A new connection has been established'))\n\nconst Chat = () => {\n    const [message, updateMessage] = useState('')\n    const [messages, updateMessages] = useState([])\n\n    useEffect(() => {\n        const handleNewMessage = newMessage =>\n            updateMessages([...messages, newMessage])\n        socket.on('chat.message', handleNewMessage)\n        return () => socket.off('chat.message', handleNewMessage)\n    }, [messages])\n\n    const handleFormSubmit = event => {\n        event.preventDefault()\n        if (message.trim()) {\n            socket.emit('chat.message', {\n                id: myId,\n                message\n            })\n            updateMessage('')\n        }\n    }\n\n    const handleInputChange = event =>\n        updateMessage(event.target.value)\n    \n    const addEmoji = e => {\n        let sym = e.unified.split('-')\n        let codesArray = []\n        sym.forEach(el => codesArray.push('0x' + el))\n        let emoji = String.fromCodePoint(...codesArray)\n        updateMessage(message + emoji)\n    }\n\n    return (\n        <main className=\"container\">\n            <ul className=\"list\">\n                { messages.map((m, index) => (\n                    <li\n                        className={`list__item list__item--${m.id === myId ? 'mine' : 'other'}`}\n                        key={index}\n                    >\n                        <span className={`message message--${m.id === myId ? 'mine' : 'other'}`}>\n                            { m.message }\n                        </span>\n                    </li>\n                ))}\n            </ul>\n            <form className=\"form\" onSubmit={handleFormSubmit}>\n                <input\n                    className=\"form__field\"\n                    onChange={handleInputChange}\n                    placeholder=\"Type a new message here\"\n                    type=\"text\"\n                    value={message}\n                />\n                {/* <span><Picker onSelect={addEmoji} /> </span> */}\n            </form>\n        </main>\n    )\n}\n\nexport default Chat\n"]},"metadata":{},"sourceType":"module"}